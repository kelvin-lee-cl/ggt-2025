// Text generator functionality using Deepseek API

let generatedTexts = [];
let currentGeneratedText = '';

document.addEventListener('DOMContentLoaded', function () {
    initializeTextGenerator();
});

function initializeTextGenerator() {
    const form = document.getElementById('textGeneratorForm');
    form.addEventListener('submit', handleTextGeneration);

    loadGeneratedTexts();
    loadApiKey('deepseek');
}

function handleTextGeneration(event) {
    event.preventDefault();

    requireAuth(() => {
        const prompt = document.getElementById('textPrompt').value;
        const type = document.getElementById('textType').value;
        const length = document.getElementById('textLength').value;
        const tone = document.getElementById('textTone').value;

        generateText(prompt, type, length, tone);
    });
}

async function generateText(prompt, type, length, tone) {
    const submitBtn = document.querySelector('#textGeneratorForm button[type="submit"]');
    const originalText = submitBtn.innerHTML;

    showLoading(submitBtn);

    try {
        const apiKey = localStorage.getItem('deepseek_api_key');
        if (!apiKey) {
            throw new Error('Please configure your Deepseek API key first.');
        }

        // Simulate API call to Deepseek
        // In a real implementation, you would make an actual API call
        const response = await simulateDeepseekAPICall(prompt, type, length, tone, apiKey);

        // Store the generated text
        currentGeneratedText = response.text;

        // Add to generated texts history
        const textData = {
            id: Date.now(),
            prompt: prompt,
            type: type,
            length: length,
            tone: tone,
            text: response.text,
            timestamp: new Date().toISOString()
        };

        generatedTexts.unshift(textData);
        saveGeneratedTexts();
        displayGeneratedText();
        displayTextHistory();

        // Update student progress
        updateStudentProgress('ai_tool_used', { tool: 'text' });

        showAlert('Text generated successfully!', 'success');

    } catch (error) {
        console.error('Text generation failed:', error);
        showAlert(`Text generation failed: ${error.message}`, 'danger');
    } finally {
        hideLoading(submitBtn, originalText);
    }
}

async function simulateDeepseekAPICall(prompt, type, length, tone, apiKey) {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Generate sample text based on parameters
    const sampleTexts = {
        essay: `Based on your prompt: "${prompt}"\n\nThis is a sample essay generated by AI. The content would be tailored to your specific request, incorporating the ${tone} tone you requested. The essay would be approximately ${length} words and would provide comprehensive coverage of the topic.\n\nIn a real implementation, this would be actual AI-generated content from the Deepseek API. The text would be coherent, well-structured, and relevant to your prompt.\n\nKey points that would be covered:\n- Introduction to the topic\n- Main arguments and supporting evidence\n- Analysis and discussion\n- Conclusion with summary\n\nThe generated content would be original and tailored to your specific requirements.`,

        summary: `Summary of: "${prompt}"\n\nKey Points:\n• Main concept or topic overview\n• Important details and supporting information\n• Key takeaways and conclusions\n• Relevant statistics or data points\n\nThis summary provides a concise overview in a ${tone} tone, suitable for ${length} length requirements.`,

        creative: `Creative Writing: "${prompt}"\n\nOnce upon a time, in a world where ${prompt.toLowerCase()}...\n\nThe story unfolds with vivid descriptions and engaging narrative elements. Characters come to life through dialogue and action, creating an immersive experience for the reader.\n\nIn this creative piece, the ${tone} tone creates a unique atmosphere that draws readers into the narrative. The story develops naturally, building tension and resolution as it progresses.\n\nThe creative elements include:\n- Rich descriptive language\n- Character development\n- Plot progression\n- Thematic elements\n\nThis creative work demonstrates the power of storytelling and imagination.`,

        technical: `Technical Documentation: "${prompt}"\n\n## Overview\nThis technical document provides detailed information about ${prompt}.\n\n## Methodology\n1. Analysis of current state\n2. Identification of key components\n3. Implementation strategy\n4. Testing and validation\n\n## Implementation Details\n- Technical specifications\n- System requirements\n- Performance metrics\n- Security considerations\n\n## Conclusion\nThis technical approach ensures reliable and efficient implementation of the requested solution.`,

        email: `Subject: ${prompt}\n\nDear [Recipient],\n\nI hope this message finds you well. I am writing to discuss ${prompt}.\n\nKey points to address:\n- Primary objective or request\n- Supporting details and context\n- Next steps or call to action\n- Timeline and expectations\n\nI look forward to your response and would be happy to discuss this further at your convenience.\n\nBest regards,\n[Your Name]`,

        report: `Executive Summary\n\nThis report addresses ${prompt} and provides comprehensive analysis and recommendations.\n\n## Key Findings\n- Primary observations and data points\n- Trends and patterns identified\n- Areas of concern or opportunity\n- Comparative analysis\n\n## Recommendations\n1. Immediate actions required\n2. Medium-term strategic initiatives\n3. Long-term planning considerations\n4. Resource requirements\n\n## Conclusion\nThis analysis provides a foundation for informed decision-making and strategic planning.`
    };

    return {
        text: sampleTexts[type] || sampleTexts.essay,
        success: true
    };
}

function displayGeneratedText() {
    const resultsDiv = document.getElementById('generatedTextResults');
    const contentDiv = document.getElementById('generatedTextContent');

    contentDiv.textContent = currentGeneratedText;
    resultsDiv.style.display = 'block';

    // Scroll to results
    resultsDiv.scrollIntoView({ behavior: 'smooth' });
}

function displayTextHistory() {
    const historyList = document.getElementById('textHistoryList');

    if (generatedTexts.length === 0) {
        historyList.innerHTML = `
            <div class="text-center text-muted">
                <i class="fas fa-history fa-2x mb-3"></i>
                <p>No text generated yet. Create your first content above!</p>
            </div>
        `;
        return;
    }

    historyList.innerHTML = generatedTexts.slice(0, 5).map(text => `
        <div class="d-flex justify-content-between align-items-center p-3 border rounded mb-2">
            <div>
                <h6 class="mb-1">${text.prompt.substring(0, 50)}${text.prompt.length > 50 ? '...' : ''}</h6>
                <small class="text-muted">${text.type} • ${text.tone} • ${text.length}</small>
            </div>
            <div class="text-end">
                <small class="text-muted">${new Date(text.timestamp).toLocaleDateString()}</small>
                <div class="mt-1">
                    <button class="btn btn-sm btn-outline-primary" onclick="loadTextFromHistory(${text.id})">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteTextFromHistory(${text.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

function loadTextFromHistory(textId) {
    const textData = generatedTexts.find(t => t.id === textId);
    if (textData) {
        currentGeneratedText = textData.text;
        displayGeneratedText();
        showAlert('Text loaded from history.', 'info');
    }
}

function deleteTextFromHistory(textId) {
    if (confirm('Are you sure you want to delete this text from history?')) {
        generatedTexts = generatedTexts.filter(t => t.id !== textId);
        saveGeneratedTexts();
        displayTextHistory();
        showAlert('Text deleted from history.', 'info');
    }
}

function copyToClipboard() {
    if (currentGeneratedText) {
        navigator.clipboard.writeText(currentGeneratedText).then(() => {
            showAlert('Text copied to clipboard!', 'success');
        }).catch(() => {
            showAlert('Failed to copy text to clipboard.', 'danger');
        });
    }
}

function downloadText() {
    if (currentGeneratedText) {
        const blob = new Blob([currentGeneratedText], { type: 'text/plain' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `generated-text-${Date.now()}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
        showAlert('Text downloaded successfully!', 'success');
    }
}

function saveGeneratedTexts() {
    localStorage.setItem('generated_texts', JSON.stringify(generatedTexts));
}

function loadGeneratedTexts() {
    const saved = localStorage.getItem('generated_texts');
    if (saved) {
        generatedTexts = JSON.parse(saved);
        displayTextHistory();
    }
}

function saveApiKey(service) {
    const apiKey = document.getElementById('deepseekApiKey').value;
    if (apiKey.trim()) {
        localStorage.setItem(`${service}_api_key`, apiKey.trim());
        showAlert('API key saved successfully!', 'success');
        document.getElementById('deepseekApiKey').value = '';
    } else {
        showAlert('Please enter a valid API key.', 'warning');
    }
}

function loadApiKey(service) {
    const savedKey = localStorage.getItem(`${service}_api_key`);
    if (savedKey) {
        document.getElementById('deepseekApiKey').value = savedKey;
    }
}

// Real Deepseek API integration (uncomment and modify as needed)
/*
async function callDeepseekAPI(prompt, type, length, tone, apiKey) {
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: 'deepseek-chat',
            messages: [
                {
                    role: 'system',
                    content: `You are a helpful AI assistant. Generate ${type} content in a ${tone} tone, approximately ${length} words.`
                },
                {
                    role: 'user',
                    content: prompt
                }
            ],
            max_tokens: 2000,
            temperature: 0.7
        })
    });
    
    if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
    }
    
    const data = await response.json();
    return {
        text: data.choices[0].message.content,
        success: true
    };
}
*/
